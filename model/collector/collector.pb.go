// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collector.proto

/*
Package collector is a generated protocol buffer package.

It is generated from these files:
	collector.proto

It has these top-level messages:
	SendTracesRequest
	SendTracesResponse
	APITraceChunk
*/
package collector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import model "github.com/DataDog/datadog-trace-agent/model"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendTracesRequest struct {
	Chunks []*APITraceChunk `protobuf:"bytes,1,rep,name=chunks" json:"chunks,omitempty"`
}

func (m *SendTracesRequest) Reset()                    { *m = SendTracesRequest{} }
func (m *SendTracesRequest) String() string            { return proto.CompactTextString(m) }
func (*SendTracesRequest) ProtoMessage()               {}
func (*SendTracesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendTracesRequest) GetChunks() []*APITraceChunk {
	if m != nil {
		return m.Chunks
	}
	return nil
}

type SendTracesResponse struct {
}

func (m *SendTracesResponse) Reset()                    { *m = SendTracesResponse{} }
func (m *SendTracesResponse) String() string            { return proto.CompactTextString(m) }
func (*SendTracesResponse) ProtoMessage()               {}
func (*SendTracesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type APITraceChunk struct {
	Spans    []*model.Span `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
	Hostname string        `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	TraceID  uint64        `protobuf:"varint,3,opt,name=traceID" json:"traceID,omitempty"`
}

func (m *APITraceChunk) Reset()                    { *m = APITraceChunk{} }
func (m *APITraceChunk) String() string            { return proto.CompactTextString(m) }
func (*APITraceChunk) ProtoMessage()               {}
func (*APITraceChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *APITraceChunk) GetSpans() []*model.Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *APITraceChunk) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *APITraceChunk) GetTraceID() uint64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func init() {
	proto.RegisterType((*SendTracesRequest)(nil), "collector.SendTracesRequest")
	proto.RegisterType((*SendTracesResponse)(nil), "collector.SendTracesResponse")
	proto.RegisterType((*APITraceChunk)(nil), "collector.APITraceChunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectorService service

type CollectorServiceClient interface {
	SendTraces(ctx context.Context, in *SendTracesRequest, opts ...grpc.CallOption) (*SendTracesResponse, error)
}

type collectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectorServiceClient(cc *grpc.ClientConn) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) SendTraces(ctx context.Context, in *SendTracesRequest, opts ...grpc.CallOption) (*SendTracesResponse, error) {
	out := new(SendTracesResponse)
	err := grpc.Invoke(ctx, "/collector.CollectorService/SendTraces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectorService service

type CollectorServiceServer interface {
	SendTraces(context.Context, *SendTracesRequest) (*SendTracesResponse, error)
}

func RegisterCollectorServiceServer(s *grpc.Server, srv CollectorServiceServer) {
	s.RegisterService(&_CollectorService_serviceDesc, srv)
}

func _CollectorService_SendTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTracesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).SendTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collector.CollectorService/SendTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).SendTraces(ctx, req.(*SendTracesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collector.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTraces",
			Handler:    _CollectorService_SendTraces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}

func init() { proto.RegisterFile("collector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4f, 0xb3, 0x40,
	0x10, 0x86, 0xc3, 0xd7, 0xcf, 0x6a, 0xa7, 0x31, 0xea, 0xc6, 0xc3, 0x86, 0x68, 0x82, 0x9c, 0xb8,
	0x74, 0x31, 0xf5, 0xe0, 0xd9, 0x14, 0x0f, 0xdc, 0xcc, 0xe2, 0xd5, 0xc3, 0x76, 0x99, 0x40, 0x23,
	0xec, 0x20, 0xbb, 0xf8, 0xfb, 0x0d, 0x20, 0x6d, 0x8d, 0xf1, 0x38, 0x3b, 0x4f, 0xde, 0x79, 0x9f,
	0x85, 0x0b, 0x4d, 0x55, 0x85, 0xda, 0x51, 0x2b, 0x9a, 0x96, 0x1c, 0xb1, 0xc5, 0xfe, 0xc1, 0x7f,
	0x2c, 0x76, 0xae, 0xec, 0xb6, 0x42, 0x53, 0x1d, 0x27, 0xca, 0xa9, 0x84, 0x8a, 0x38, 0x57, 0x4e,
	0xe5, 0x54, 0xac, 0x5c, 0xab, 0x34, 0xae, 0x54, 0x81, 0xc6, 0xc5, 0x35, 0xe5, 0x58, 0xc5, 0xb6,
	0x51, 0x66, 0xcc, 0x08, 0x9f, 0xe1, 0x2a, 0x43, 0x93, 0xbf, 0xf6, 0x8c, 0x95, 0xf8, 0xd1, 0xa1,
	0x75, 0xec, 0x1e, 0xe6, 0xba, 0xec, 0xcc, 0xbb, 0xe5, 0x5e, 0x30, 0x8b, 0x96, 0x6b, 0x2e, 0x0e,
	0xa7, 0x9f, 0x5e, 0xd2, 0x01, 0xde, 0xf4, 0x80, 0xfc, 0xe6, 0xc2, 0x6b, 0x60, 0xc7, 0x31, 0xb6,
	0x21, 0x63, 0x31, 0x2c, 0xe1, 0xfc, 0x07, 0xce, 0xee, 0xe0, 0xa4, 0xbf, 0x3d, 0xe5, 0x2e, 0xc5,
	0xd0, 0x47, 0x64, 0x8d, 0x32, 0x72, 0xdc, 0x30, 0x1f, 0xce, 0x4a, 0xb2, 0xce, 0xa8, 0x1a, 0xf9,
	0xbf, 0xc0, 0x8b, 0x16, 0x72, 0x3f, 0x33, 0x0e, 0xa7, 0x83, 0x4c, 0x9a, 0xf0, 0x59, 0xe0, 0x45,
	0xff, 0xe5, 0x34, 0xae, 0xdf, 0xe0, 0x72, 0x33, 0x55, 0xcc, 0xb0, 0xfd, 0xdc, 0x69, 0x64, 0x29,
	0xc0, 0xa1, 0x13, 0xbb, 0x39, 0x72, 0xf8, 0x65, 0xec, 0xdf, 0xfe, 0xb1, 0x1d, 0x45, 0xb6, 0xf3,
	0xe1, 0xb3, 0x1e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x8b, 0x9d, 0xd8, 0x83, 0x01, 0x00,
	0x00,
}
