// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package model

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
	"unsafe"
)

const (
	// ----- content types ----
	codecSelferC_UTF82555 = 1
	codecSelferC_RAW2555  = 0
	// ----- value types used ----
	codecSelferValueTypeArray2555 = 10
	codecSelferValueTypeMap2555   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey2555    = 2
	codecSelfer_containerMapValue2555  = 3
	codecSelfer_containerMapEnd2555    = 4
	codecSelfer_containerArrayElem2555 = 6
	codecSelfer_containerArrayEnd2555  = 7
)

var (
	codecSelferBitsize2555                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr2555 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelferUnsafeString2555 struct {
	Data uintptr
	Len  int
}

type codecSelfer2555 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 unsafe.Pointer
		_ = v0
	}
}

func (x *Span) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 12
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Service))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("service"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Service))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Resource))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.TraceID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("trace_id"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.TraceID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.SpanID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("span_id"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.SpanID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Start))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("start"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Start))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeInt(int64(x.Duration))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("duration"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeInt(int64(x.Duration))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeInt(int64(x.Error))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("error"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeInt(int64(x.Error))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				if x.Metrics == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Metrics, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("metrics"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				if x.Metrics == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Metrics, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeUint(uint64(x.ParentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("parent_id"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeUint(uint64(x.ParentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem2555)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey2555)
				r.EncodeString(codecSelferC_UTF82555, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue2555)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF82555, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd2555)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd2555)
			}
		}
	}
}

func (x *Span) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap2555 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd2555)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray2555 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr2555)
		}
	}
}

func (x *Span) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey2555)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString2555{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue2555)
		switch yys3 {
		case "service":
			if r.TryDecodeAsNil() {
				x.Service = ""
			} else {
				yyv4 := &x.Service
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv6 := &x.Name
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				yyv8 := &x.Resource
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "trace_id":
			if r.TryDecodeAsNil() {
				x.TraceID = 0
			} else {
				yyv10 := &x.TraceID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "span_id":
			if r.TryDecodeAsNil() {
				x.SpanID = 0
			} else {
				yyv12 := &x.SpanID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "start":
			if r.TryDecodeAsNil() {
				x.Start = 0
			} else {
				yyv14 := &x.Start
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "duration":
			if r.TryDecodeAsNil() {
				x.Duration = 0
			} else {
				yyv16 := &x.Duration
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*int64)(yyv16)) = int64(r.DecodeInt(64))
				}
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = 0
			} else {
				yyv18 := &x.Error
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*int32)(yyv18)) = int32(r.DecodeInt(32))
				}
			}
		case "meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv20 := &x.Meta
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					z.F.DecMapStringStringX(yyv20, false, d)
				}
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv22 := &x.Metrics
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecMapStringFloat64X(yyv22, false, d)
				}
			}
		case "parent_id":
			if r.TryDecodeAsNil() {
				x.ParentID = 0
			} else {
				yyv24 := &x.ParentID
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*uint64)(yyv24)) = uint64(r.DecodeUint(64))
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv26 := &x.Type
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd2555)
}

func (x *Span) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj28 int
	var yyb28 bool
	var yyhl28 bool = l >= 0
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Service = ""
	} else {
		yyv29 := &x.Service
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv31 := &x.Name
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		yyv33 := &x.Resource
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.TraceID = 0
	} else {
		yyv35 := &x.TraceID
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*uint64)(yyv35)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.SpanID = 0
	} else {
		yyv37 := &x.SpanID
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint64)(yyv37)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Start = 0
	} else {
		yyv39 := &x.Start
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*int64)(yyv39)) = int64(r.DecodeInt(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Duration = 0
	} else {
		yyv41 := &x.Duration
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*int64)(yyv41)) = int64(r.DecodeInt(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Error = 0
	} else {
		yyv43 := &x.Error
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*int32)(yyv43)) = int32(r.DecodeInt(32))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv45 := &x.Meta
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			z.F.DecMapStringStringX(yyv45, false, d)
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv47 := &x.Metrics
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			z.F.DecMapStringFloat64X(yyv47, false, d)
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.ParentID = 0
	} else {
		yyv49 := &x.ParentID
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*uint64)(yyv49)) = uint64(r.DecodeUint(64))
		}
	}
	yyj28++
	if yyhl28 {
		yyb28 = yyj28 > l
	} else {
		yyb28 = r.CheckBreak()
	}
	if yyb28 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem2555)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv51 := &x.Type
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	for {
		yyj28++
		if yyhl28 {
			yyb28 = yyj28 > l
		} else {
			yyb28 = r.CheckBreak()
		}
		if yyb28 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem2555)
		z.DecStructFieldNotFound(yyj28-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd2555)
}

func (x Trace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encTrace((Trace)(x), e)
		}
	}
}

func (x *Trace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decTrace((*Trace)(x), d)
	}
}

func (x ServicesMetadata) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encServicesMetadata((ServicesMetadata)(x), e)
		}
	}
}

func (x *ServicesMetadata) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decServicesMetadata((*ServicesMetadata)(x), d)
	}
}

func (x codecSelfer2555) encTrace(v Trace, e *codec1978.Encoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem2555)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd2555)
}

func (x codecSelfer2555) decTrace(v *Trace, d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Span{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Span, yyrl1)
				}
			} else {
				yyv1 = make([]Span, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Span{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Span{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Span{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Span{}) // var yyz1 Span
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Span{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Span{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer2555) encServicesMetadata(v ServicesMetadata, e *codec1978.Encoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey2555)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF82555, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue2555)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else {
				z.F.EncMapStringStringV(yyv1, false, e)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd2555)
}

func (x codecSelfer2555) decServicesMetadata(v *ServicesMetadata, d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]map[string]string, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 map[string]string
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey2555)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue2555)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv4 := &yymv1
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey2555)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue2555)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv8 := &yymv1
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecMapStringStringX(yyv8, false, d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd2555)
}

func (x codecSelfer2555) encMapstringstring(v map[string]string, e *codec1978.Encoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey2555)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF82555, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue2555)
		yym3 := z.EncBinary()
		_ = yym3
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF82555, string(yyv1))
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd2555)
}

func (x codecSelfer2555) decMapstringstring(v *map[string]string, d *codec1978.Decoder) {
	var h codecSelfer2555
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 32)
		yyv1 = make(map[string]string, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 string
	var yymg1 bool
	if yybh1.MapValueReset {
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey2555)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue2555)
			if r.TryDecodeAsNil() {
				yymv1 = ""
			} else {
				yyv4 := &yymv1
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey2555)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			}
			z.DecSendContainerState(codecSelfer_containerMapValue2555)
			if r.TryDecodeAsNil() {
				yymv1 = ""
			} else {
				yyv8 := &yymv1
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd2555)
}
