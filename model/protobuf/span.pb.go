// Code generated by protoc-gen-go.
// source: model/protobuf/span.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model/protobuf/span.proto

It has these top-level messages:
	Span
	Trace
	TracePayload
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Span struct {
	Service   string             `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Resource  string             `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
	TraceID   uint64             `protobuf:"varint,4,opt,name=traceID" json:"traceID,omitempty"`
	SpanID    uint64             `protobuf:"varint,5,opt,name=spanID" json:"spanID,omitempty"`
	StartTime int64              `protobuf:"varint,6,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   int64              `protobuf:"varint,7,opt,name=endTime" json:"endTime,omitempty"`
	Duration  int64              `protobuf:"varint,8,opt,name=duration" json:"duration,omitempty"`
	Error     int32              `protobuf:"varint,9,opt,name=error" json:"error,omitempty"`
	Meta      map[string]string  `protobuf:"bytes,10,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Metrics   map[string]float64 `protobuf:"bytes,11,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	ParentID  uint64             `protobuf:"varint,12,opt,name=parentID" json:"parentID,omitempty"`
	Type      string             `protobuf:"bytes,13,opt,name=type" json:"type,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Span) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *Span) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Span) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Span) GetTraceID() uint64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func (m *Span) GetSpanID() uint64 {
	if m != nil {
		return m.SpanID
	}
	return 0
}

func (m *Span) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Span) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Span) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Span) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *Span) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Span) GetMetrics() map[string]float64 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Span) GetParentID() uint64 {
	if m != nil {
		return m.ParentID
	}
	return 0
}

func (m *Span) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Trace struct {
	TraceID   uint64  `protobuf:"varint,1,opt,name=traceID" json:"traceID,omitempty"`
	Spans     []*Span `protobuf:"bytes,2,rep,name=spans" json:"spans,omitempty"`
	StartTime int64   `protobuf:"varint,6,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   int64   `protobuf:"varint,7,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Trace) GetTraceID() uint64 {
	if m != nil {
		return m.TraceID
	}
	return 0
}

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *Trace) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Trace) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type TracePayload struct {
	HostName string   `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	Env      string   `protobuf:"bytes,2,opt,name=env" json:"env,omitempty"`
	Traces   []*Trace `protobuf:"bytes,3,rep,name=traces" json:"traces,omitempty"`
}

func (m *TracePayload) Reset()                    { *m = TracePayload{} }
func (m *TracePayload) String() string            { return proto.CompactTextString(m) }
func (*TracePayload) ProtoMessage()               {}
func (*TracePayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TracePayload) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *TracePayload) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *TracePayload) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

func init() {
	proto.RegisterType((*Span)(nil), "model.Span")
	proto.RegisterType((*Trace)(nil), "model.Trace")
	proto.RegisterType((*TracePayload)(nil), "model.TracePayload")
}

func init() { proto.RegisterFile("model/protobuf/span.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x8b, 0x13, 0x41,
	0x10, 0xa5, 0x33, 0x33, 0xc9, 0xa6, 0x12, 0x41, 0x1a, 0x95, 0x32, 0x78, 0x18, 0x83, 0x87, 0xf1,
	0x92, 0x85, 0xf5, 0xa0, 0xec, 0x39, 0x1e, 0x72, 0x50, 0x64, 0xdc, 0x3f, 0xd0, 0x49, 0x4a, 0x0c,
	0x66, 0xba, 0x87, 0xee, 0x4e, 0x60, 0xc0, 0x1f, 0xed, 0x4f, 0x90, 0xaa, 0xf9, 0x70, 0xf4, 0x22,
	0xec, 0xad, 0x5e, 0xbf, 0xea, 0xea, 0xf7, 0x5e, 0x35, 0xbc, 0xac, 0xdc, 0x91, 0xce, 0xb7, 0xb5,
	0x77, 0xd1, 0xed, 0x2f, 0xdf, 0x6e, 0x43, 0x6d, 0xec, 0x46, 0x90, 0xce, 0x84, 0x5a, 0xff, 0x4a,
	0x20, 0xfd, 0x5a, 0x1b, 0xab, 0x11, 0x66, 0x81, 0xfc, 0xf5, 0x74, 0x20, 0x54, 0xb9, 0x2a, 0xe6,
	0x65, 0x0f, 0xb5, 0x86, 0xd4, 0x9a, 0x8a, 0x70, 0x22, 0xc7, 0x52, 0xeb, 0x15, 0xdc, 0x78, 0x0a,
	0xee, 0xe2, 0x0f, 0x84, 0x89, 0x9c, 0x0f, 0x98, 0x27, 0x45, 0x6f, 0x0e, 0xb4, 0xdb, 0x62, 0x9a,
	0xab, 0x22, 0x2d, 0x7b, 0xa8, 0x5f, 0xc0, 0x94, 0x15, 0xec, 0xb6, 0x98, 0x09, 0xd1, 0x21, 0xfd,
	0x0a, 0xe6, 0x21, 0x1a, 0x1f, 0x1f, 0x4e, 0x15, 0xe1, 0x34, 0x57, 0x45, 0x52, 0xfe, 0x39, 0xe0,
	0x79, 0x64, 0x8f, 0xc2, 0xcd, 0x84, 0xeb, 0x21, 0xab, 0x38, 0x5e, 0xbc, 0x89, 0x27, 0x67, 0xf1,
	0x46, 0xa8, 0x01, 0xeb, 0x67, 0x90, 0x91, 0xf7, 0xce, 0xe3, 0x3c, 0x57, 0x45, 0x56, 0xb6, 0x40,
	0xbf, 0x85, 0xb4, 0xa2, 0x68, 0x10, 0xf2, 0xa4, 0x58, 0xdc, 0x3d, 0xdf, 0x48, 0x08, 0x1b, 0x0e,
	0x60, 0xf3, 0x89, 0xa2, 0xf9, 0x68, 0xa3, 0x6f, 0x4a, 0x69, 0xd1, 0x77, 0x30, 0xab, 0x28, 0xfa,
	0xd3, 0x21, 0xe0, 0x42, 0xba, 0xf1, 0x9f, 0x6e, 0xa6, 0xda, 0x0b, 0x7d, 0x23, 0x0b, 0xaa, 0x8d,
	0x27, 0x1b, 0x77, 0x5b, 0x5c, 0x8a, 0xc5, 0x01, 0x73, 0x8c, 0xb1, 0xa9, 0x09, 0x9f, 0xb4, 0x31,
	0x72, 0xbd, 0x7a, 0x0f, 0xf3, 0xe1, 0x59, 0xfd, 0x14, 0x92, 0x1f, 0xd4, 0x74, 0xe9, 0x73, 0xc9,
	0x1e, 0xae, 0xe6, 0x7c, 0xe9, 0xa3, 0x6f, 0xc1, 0xfd, 0xe4, 0x83, 0x5a, 0xdd, 0xc3, 0x72, 0xac,
	0xe0, 0x7f, 0x77, 0xd5, 0xe8, 0xee, 0xfa, 0x27, 0x64, 0x0f, 0xbc, 0x90, 0xf1, 0xa2, 0xd4, 0xdf,
	0x8b, 0x7a, 0x0d, 0x19, 0xaf, 0x26, 0xe0, 0x44, 0x9c, 0x2f, 0x46, 0xce, 0xcb, 0x96, 0x79, 0xec,
	0xce, 0xd6, 0x7b, 0x58, 0xca, 0xeb, 0x5f, 0x4c, 0x73, 0x76, 0xe6, 0xc8, 0x91, 0x7d, 0x77, 0x21,
	0x7e, 0xe6, 0x1f, 0xd6, 0xca, 0x1f, 0x30, 0xbb, 0x22, 0x7b, 0xed, 0xdc, 0x73, 0xa9, 0xdf, 0xc0,
	0x54, 0x34, 0x06, 0x4c, 0x44, 0xd9, 0xb2, 0x53, 0x26, 0x23, 0xcb, 0x8e, 0xdb, 0x4f, 0xe5, 0x8b,
	0xbf, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x48, 0x58, 0xa8, 0xa2, 0xff, 0x02, 0x00, 0x00,
}
